{"mappings":"ACEA,MAAM,EAAW,IAAI,SAAS,gBAAgB,CAAC,0BAA0B,CAQnE,EAAW,IAAI,qBAIrB,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAM,KAAS,EACd,EAAM,cAAc,EACtB,EAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CACxB,EAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,aAC5B,iBACA,kBAEN,EAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,cAC9B,EAAS,SAAS,CAAC,EAAM,MAAM,GAEjC,EAAM,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAkB,iBAGtD,EAxBc,CACZ,KAAM,KACN,WAAY,MACZ,UAAW,EACb,GAIA,EAAS,OAAO,CAAC,AAAC,GAAY,EAAS,OAAO,CAAC","sources":["<anon>","src/js/main.js"],"sourcesContent":["/* Animation on scrolling */ const elements = [\n    ...document.querySelectorAll(\".cls-aos-X, .cls-aos-Y\")\n];\nlet options = {\n    root: null,\n    rootMargin: \"0px\",\n    threshold: 0.3\n};\nconst observer = new IntersectionObserver(callback, options);\nelements.forEach((element)=>observer.observe(element));\nfunction callback(entries, observer) {\n    for (const entry of entries)if (entry.isIntersecting) {\n        entry.target.classList.add(entry.target.classList.contains(\"cls-aos-X\") ? \"cls-translateX\" : \"cls-translateY\");\n        entry.target.classList.contains(\"cls-aos-Y\") && observer.unobserve(entry.target);\n    } else entry.target.classList.remove(\"cls-translateX\", \"cls-translateY\");\n}\n/* Sidebar */ function toggleSideBar() {\n    const sidebar = document.getElementById(\"sidebar\");\n    sidebar.classList.toggle(\"cls-open\");\n    if (sidebar.classList.contains(\"cls-open\")) {\n        sidebar.querySelector(\"ul\").style.opacity = \"1\";\n        sidebar.querySelector(\".cls-contact\").style.opacity = \"1\";\n        sidebar.querySelector(\".cls-connect\").style.opacity = \"1\";\n    }\n}\n\n//# sourceMappingURL=index.173d3ba2.js.map\n","/* Animation on scrolling */\n\nconst elements = [...document.querySelectorAll(\".cls-aos-X, .cls-aos-Y\")];\n\nlet options = {\n  root: null,\n  rootMargin: \"0px\",\n  threshold: 0.3, // [1, 0.2, 0.5] // 50% intersection\n};\n\nconst observer = new IntersectionObserver(callback, options);\n\nelements.forEach((element) => observer.observe(element));\n\nfunction callback(entries, observer) {\n  for (const entry of entries) {\n    if (entry.isIntersecting) {\n      entry.target.classList.add(\n        entry.target.classList.contains(\"cls-aos-X\")\n          ? \"cls-translateX\"\n          : \"cls-translateY\"\n      );\n      entry.target.classList.contains(\"cls-aos-Y\") &&\n        observer.unobserve(entry.target);\n    } else {\n      entry.target.classList.remove(\"cls-translateX\", \"cls-translateY\");\n    }\n  }\n}\n\n/* Sidebar */\nfunction toggleSideBar() {\n  const sidebar = document.getElementById(\"sidebar\");\n  sidebar.classList.toggle(\"cls-open\");\n\n  if(sidebar.classList.contains('cls-open')){\n    sidebar.querySelector('ul').style.opacity = '1';\n    sidebar.querySelector('.cls-contact').style.opacity = '1';\n    sidebar.querySelector('.cls-connect').style.opacity = '1';\n  }\n  \n}\n"],"names":["elements","document","querySelectorAll","observer","IntersectionObserver","entries","entry","isIntersecting","target","classList","add","contains","unobserve","remove","root","rootMargin","threshold","forEach","element","observe"],"version":3,"file":"index.173d3ba2.js.map"}